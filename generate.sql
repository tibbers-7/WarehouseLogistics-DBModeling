-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2023-01-30 16:34:33 CET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE analysis (
    idanalysis            INTEGER NOT NULL,
    productionreport_idpr INTEGER NOT NULL
);

ALTER TABLE analysis ADD CONSTRAINT analysis_pk PRIMARY KEY ( idanalysis );

CREATE TABLE analysisreport (
    status              CLOB,
    report              CLOB,
    analysis_idanalysis INTEGER NOT NULL
);

ALTER TABLE analysisreport
    ADD CHECK ( status IN ( 'ACCEPTED', 'CANCELLED', 'DENIED', 'SENT', 'WAITING' ) );

ALTER TABLE analysisreport ADD CONSTRAINT analysisreport_pk PRIMARY KEY ( analysis_idanalysis );

CREATE TABLE batch (
    idbatch               INTEGER,
    quantity              INTEGER,
    expdate               DATE,
    productionreport_idpr INTEGER,
    batch_id              NUMBER NOT NULL,
    idsku                 INTEGER NOT NULL
);

ALTER TABLE batch ADD CONSTRAINT batch_pk PRIMARY KEY ( batch_id );

CREATE TABLE buyer (
    identity            INTEGER
        CONSTRAINT nnc_buyer_identity NOT NULL,
    idbuyer             INTEGER
        CONSTRAINT nnc_buyer_idbuyer NOT NULL,
    finlimit            FLOAT,
    casaconto           FLOAT,
    managerofoperations CLOB
);

INSERT INTO buyer (
    identity,
    idbuyer,
    finlimit,
    casaconto,
    managerofoperations
) VALUES (
    1,
    1,
    1.0,
    1.0,
    "Milan Miric"
);

ALTER TABLE buyer ADD CONSTRAINT buyer_pk PRIMARY KEY ( identity,
                                                        idbuyer );

ALTER TABLE buyer ADD CONSTRAINT buyer_idbuyer_un UNIQUE ( idbuyer );

CREATE TABLE itinerary (
    iditinerary                 INTEGER NOT NULL,
    transpprice                 FLOAT,
    dispatchdate                DATE,
    timeslot                    DATE,
    releaseorder_idro           INTEGER NOT NULL,
    vehicle_idvehicle           INTEGER NOT NULL,
    releaseorder_buyer_identity INTEGER NOT NULL,
    releaseorder_buyer_idbuyer  INTEGER NOT NULL
);

CREATE UNIQUE INDEX itinerary__idx ON
    itinerary (
        releaseorder_idro
    ASC,
        releaseorder_buyer_identity
    ASC );

ALTER TABLE itinerary ADD CONSTRAINT itinerary_pk PRIMARY KEY ( iditinerary );

CREATE TABLE laboratory (
    identity            INTEGER NOT NULL,
    idlab               INTEGER NOT NULL,
    typeofanalysis      CLOB,
    analysis_idanalysis INTEGER
);

ALTER TABLE laboratory ADD CONSTRAINT laboratory_pk PRIMARY KEY ( identity,
                                                                  idlab );

ALTER TABLE laboratory ADD CONSTRAINT laboratory_pkv1 UNIQUE ( idlab );

CREATE TABLE legalentity (
    identity         INTEGER NOT NULL,
    email            CLOB,
    contact          CLOB,
    personincharge   CLOB,
    address          CLOB,
    pib              INTEGER,
    legalentity_type VARCHAR2(11) NOT NULL
);

ALTER TABLE legalentity
    ADD CONSTRAINT ch_inh_legalentity CHECK ( legalentity_type IN ( 'Buyer', 'Laboratory', 'LegalEntity', 'Transporter' ) );

INSERT INTO legalentity (
    identity,
    email,
    contact,
    personincharge,
    address,
    pib,
    legalentity_type
) VALUES (
    1,
    'milanmiric@gmail.com',
    '+3816219832',
    'Bulevar Evrope 7,Novi Sad',
    8247539,
    'BUYER'
);

ALTER TABLE legalentity ADD CONSTRAINT legalentity_pk PRIMARY KEY ( identity );

CREATE TABLE productionreport (
    idpr     INTEGER NOT NULL,
    prodline INTEGER,
    proddate DATE
);

ALTER TABLE productionreport ADD CONSTRAINT productionreport_pk PRIMARY KEY ( idpr );

CREATE TABLE releaseorder (
    idro            INTEGER NOT NULL,
    porder          INTEGER,
    deliverynote    CLOB,
    status          CLOB,
    deliveryaddress CLOB,
    rodate          DATE,
    buyer_identity  INTEGER NOT NULL,
    buyer_idbuyer   INTEGER NOT NULL,
    dispatchdate    DATE
);

ALTER TABLE releaseorder
    ADD CHECK ( status IN ( 'ACCEPTED', 'CANCELLED', 'DENIED', 'SENT', 'WAITING' ) );

ALTER TABLE releaseorder ADD CONSTRAINT releaseorder_pk PRIMARY KEY ( idro,
                                                                      buyer_idbuyer );

CREATE TABLE releaseorderitem (
    idroi                       INTEGER NOT NULL,
    quantity                    INTEGER,
    productionreport_idpr       INTEGER NOT NULL,
    releaseorder_idro           INTEGER NOT NULL,
    releaseorder_buyer_identity INTEGER NOT NULL,
    idsku                       INTEGER,
    releaseorder_buyer_idbuyer  INTEGER NOT NULL
);

ALTER TABLE releaseorderitem ADD CONSTRAINT releaseorderitem_pk PRIMARY KEY ( idroi );

CREATE TABLE sku_multiple (
    storagekeepingunit_idsku  INTEGER NOT NULL,
    storagekeepingunit_idsku1 INTEGER NOT NULL
);

ALTER TABLE sku_multiple ADD CONSTRAINT relation_14_pk PRIMARY KEY ( storagekeepingunit_idsku,
                                                                     storagekeepingunit_idsku1 );

CREATE TABLE storagekeepingunit (
    idsku       INTEGER NOT NULL,
    ident       VARCHAR2(10 BYTE),
    itdesc      VARCHAR2(1000),
    idmarket    VARCHAR2(5),
    netweight   FLOAT,
    grossweight FLOAT,
    caseupc     INTEGER,
    preforig    CHAR(1),
    price       FLOAT
);

ALTER TABLE storagekeepingunit ADD CONSTRAINT storagekeepingunit_pk PRIMARY KEY ( idsku );

CREATE TABLE transporter (
    identity      INTEGER NOT NULL,
    idtransporter INTEGER NOT NULL,
    fleet         INTEGER
);

ALTER TABLE transporter ADD CONSTRAINT transporter_pk PRIMARY KEY ( identity,
                                                                    idtransporter );

ALTER TABLE transporter ADD CONSTRAINT transporter_pkv1 UNIQUE ( idtransporter );

CREATE TABLE vehicle (
    idvehicle    INTEGER NOT NULL,
    loadcapacity FLOAT,
    age          INTEGER,
    platenumber  CLOB,
    type         CLOB
);

ALTER TABLE vehicle
    ADD CHECK ( type IN ( 'CAR', 'FORKLIFT', 'TRUCK', 'VAN' ) );

ALTER TABLE vehicle ADD CONSTRAINT vehicle_pk PRIMARY KEY ( idvehicle );

ALTER TABLE analysis
    ADD CONSTRAINT analysis_productionreport_fk FOREIGN KEY ( productionreport_idpr )
        REFERENCES productionreport ( idpr );

ALTER TABLE analysisreport
    ADD CONSTRAINT analysisreport_analysis_fk FOREIGN KEY ( analysis_idanalysis )
        REFERENCES analysis ( idanalysis );

ALTER TABLE batch
    ADD CONSTRAINT batch_productionreport_fk FOREIGN KEY ( productionreport_idpr )
        REFERENCES productionreport ( idpr );

ALTER TABLE batch
    ADD CONSTRAINT batch_storagekeepingunit_fk FOREIGN KEY ( idsku )
        REFERENCES storagekeepingunit ( idsku );

ALTER TABLE buyer
    ADD CONSTRAINT buyer_legalentity_fk FOREIGN KEY ( identity )
        REFERENCES legalentity ( identity );

ALTER TABLE itinerary
    ADD CONSTRAINT itinerary_releaseorder_fk FOREIGN KEY ( releaseorder_idro,
                                                           releaseorder_buyer_idbuyer )
        REFERENCES releaseorder ( idro,
                                  buyer_idbuyer );

ALTER TABLE itinerary
    ADD CONSTRAINT itinerary_vehicle_fk FOREIGN KEY ( vehicle_idvehicle )
        REFERENCES vehicle ( idvehicle );

ALTER TABLE laboratory
    ADD CONSTRAINT laboratory_analysis_fk FOREIGN KEY ( analysis_idanalysis )
        REFERENCES analysis ( idanalysis );

ALTER TABLE laboratory
    ADD CONSTRAINT laboratory_legalentity_fk FOREIGN KEY ( identity )
        REFERENCES legalentity ( identity );

ALTER TABLE releaseorder
    ADD CONSTRAINT releaseorder_buyer_fk FOREIGN KEY ( buyer_identity,
                                                       buyer_idbuyer )
        REFERENCES buyer ( identity,
                           idbuyer );

ALTER TABLE releaseorderitem
    ADD CONSTRAINT roi_pr_fk FOREIGN KEY ( productionreport_idpr )
        REFERENCES productionreport ( idpr );

ALTER TABLE releaseorderitem
    ADD CONSTRAINT roi_ro_fk FOREIGN KEY ( releaseorder_idro,
                                           releaseorder_buyer_idbuyer )
        REFERENCES releaseorder ( idro,
                                  buyer_idbuyer );

ALTER TABLE sku_multiple
    ADD CONSTRAINT storagekeepingunit_fk FOREIGN KEY ( storagekeepingunit_idsku )
        REFERENCES storagekeepingunit ( idsku );

ALTER TABLE sku_multiple
    ADD CONSTRAINT storagekeepingunit_fkv1 FOREIGN KEY ( storagekeepingunit_idsku1 )
        REFERENCES storagekeepingunit ( idsku );

ALTER TABLE transporter
    ADD CONSTRAINT transporter_legalentity_fk FOREIGN KEY ( identity )
        REFERENCES legalentity ( identity );

ALTER TABLE vehicle
    ADD CONSTRAINT vehicle_transporter_fk FOREIGN KEY ( idvehicle )
        REFERENCES transporter ( identity,
                                 idtransporter );

CREATE OR REPLACE TRIGGER arc_fkarc_1_buyer BEFORE
    INSERT OR UPDATE OF identity ON buyer
    FOR EACH ROW
DECLARE
    d VARCHAR2(11);
BEGIN
    SELECT
        a.legalentity_type
    INTO d
    FROM
        legalentity a
    WHERE
        a.identity = :new.identity;

    IF ( d IS NULL OR d <> 'Buyer' ) THEN
        raise_application_error(
                               -20223,
                               'FK Buyer_LegalEntity_FK in Table Buyer violates Arc constraint on Table LegalEntity - discriminator column LegalEntity_TYPE doesn''t have value ''Buyer'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_transporter BEFORE
    INSERT OR UPDATE OF identity ON transporter
    FOR EACH ROW
DECLARE
    d VARCHAR2(11);
BEGIN
    SELECT
        a.legalentity_type
    INTO d
    FROM
        legalentity a
    WHERE
        a.identity = :new.identity;

    IF ( d IS NULL OR d <> 'Transporter' ) THEN
        raise_application_error(
                               -20223,
                               'FK Transporter_LegalEntity_FK in Table Transporter violates Arc constraint on Table LegalEntity - discriminator column LegalEntity_TYPE doesn''t have value ''Transporter'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_laboratory BEFORE
    INSERT OR UPDATE OF identity ON laboratory
    FOR EACH ROW
DECLARE
    d VARCHAR2(11);
BEGIN
    SELECT
        a.legalentity_type
    INTO d
    FROM
        legalentity a
    WHERE
        a.identity = :new.identity;

    IF ( d IS NULL OR d <> 'Laboratory' ) THEN
        raise_application_error(
                               -20223,
                               'FK Laboratory_LegalEntity_FK in Table Laboratory violates Arc constraint on Table LegalEntity - discriminator column LegalEntity_TYPE doesn''t have value ''Laboratory'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE SEQUENCE batch_batch_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER batch_batch_id_trg BEFORE
    INSERT ON batch
    FOR EACH ROW
    WHEN ( new.batch_id IS NULL )
BEGIN
    :new.batch_id := batch_batch_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            14
-- CREATE INDEX                             1
-- ALTER TABLE                             37
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           4
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          1
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
